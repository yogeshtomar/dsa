package dynamicProgramming.onSubsequences;

import java.util.Arrays;

/**
 * We are given a rod of size ‘N’. It can be cut into pieces. Each length of a piece has a particular price given by the
 * price array. Our task is to find the maximum revenue that can be generated by selling the rod after
 * cutting( if required) into pieces.
 */

public class RodCutting {

    public static int maxAmount(int length, int[] prices) {
        int n = prices.length;
        int[][] dp = new int[n][n+1];

        for (int[] row : dp) {
            Arrays.fill(row, -1);
        }

        return maxAmountUtil(n-1, n, prices, dp);
    }
    private static int maxAmountUtil(int idx, int length, int[] prices, int[][] dp) {
        if (idx == 0) {
            return length * prices[0];
        }
        if (dp[idx][length] != -1) {
            return dp[idx][length];
        }

        int excluded = maxAmountUtil(idx-1, length, prices, dp);
        int included = 0;
        int rodLength = idx+1;
        if (rodLength <= length) {
            included = prices[idx] + maxAmountUtil(idx, length - rodLength, prices, dp);
        }
        return  dp[idx][length] = Math.max(included, excluded);
    }

    public static void main(String[] args) {
        int[] prices = {1, 5, 8, 9, 10, 17, 17, 20};
        int n = prices.length;

        System.out.println("Max profit that can earned by selling the rod of size n:" + maxAmount(n, prices));
        System.out.println("Max profit that can earned by selling the rod of size n using tabulation:" + tabulation(n, prices));
    }

    private static int tabulation(int n, int[] prices) {
        int[][] dp = new int[n][n+1];

        for (int length = 0; length <= n; length++) {
            dp[0][length] = length * prices[0];
        }

        for (int idx = 1; idx < n; idx++) {
            for (int len = 0; len <= n; len++) {
                int exclude = dp[idx-1][len];
                int include = 0;
                int rodLen = idx + 1;
                if (rodLen <= len) {
                    include = prices[idx] + dp[idx][len - rodLen];
                }
                dp[idx][len] = Math.max(include, exclude);
            }
        }
        return dp[n-1][n];
    }
}
